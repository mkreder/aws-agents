AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: HR AI Agent - Multi-Agent Collaboration with Amazon Bedrock Agents

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name (dev, test, prod)
  
  BedrockModelId:
    Type: String
    Default: amazon.nova-pro-v1:0
    Description: Amazon Bedrock model ID to use for the agents (Amazon Nova Pro v1)

Resources:
  # DynamoDB Tables
  CandidatesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-candidates-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  # IAM Role for Bedrock Agents
  BedrockAgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt CandidatesTable.Arn
        - PolicyName: LambdaInvokeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt AgentExecutorFunction.Arn

  # Lambda function for agent actions
  AgentExecutorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-agent-executor-${Environment}"
      CodeUri: functions/agent_executor/
      Handler: app.lambda_handler
      Runtime: python3.11
      Timeout: 60
      Environment:
        Variables:
          CANDIDATES_TABLE: !Ref CandidatesTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CandidatesTable

  AgentExecutorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AgentExecutorFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com

  # 1. Resume Parser Agent - Based on stepfunctions resume_parser
  ResumeParserAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "${AWS::StackName}-resume-parser-${Environment}"
      AgentResourceRoleArn: !GetAtt BedrockAgentRole.Arn
      Description: Specialized agent for parsing resumes and extracting key information
      FoundationModel: !Ref BedrockModelId
      IdleSessionTTLInSeconds: 1800
      Instruction: |
        You are an expert HR assistant specialized in parsing resumes and extracting key information.

        When given a resume, extract and structure the following information:
        - Personal Information: Name, email, phone, location, LinkedIn, GitHub
        - Professional Summary: Brief overview of experience and expertise
        - Technical Skills: Programming languages, frameworks, tools, platforms
        - Professional Experience: Companies, roles, dates, key achievements
        - Education: Degrees, institutions, graduation dates, GPA if mentioned
        - Projects: Personal/professional projects with descriptions
        - Certifications: Professional certifications and achievements
        - Languages: Spoken languages and proficiency levels
        - Additional Information: Interests, publications, awards

        Structure the information clearly and comprehensively. Focus on accuracy and completeness.
        Format your response as a JSON object with clear, structured data.

  ResumeParserAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !Ref ResumeParserAgent
      AgentAliasName: !Sub "${Environment}-alias"
      Description: !Sub "Resume parser agent alias for ${Environment}"

  # 2. Job Analyzer Agent - Based on stepfunctions job_extractor
  JobAnalyzerAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "${AWS::StackName}-job-analyzer-${Environment}"
      AgentResourceRoleArn: !GetAtt BedrockAgentRole.Arn
      Description: Specialized agent for analyzing job descriptions and extracting requirements
      FoundationModel: !Ref BedrockModelId
      IdleSessionTTLInSeconds: 1800
      Instruction: |
        You are an expert HR assistant specialized in analyzing job descriptions and extracting key requirements.

        When given a job description, extract and categorize:
        - Required Skills: Must-have technical and soft skills
        - Preferred Skills: Nice-to-have skills and experience
        - Experience Level: Years of experience required
        - Education Requirements: Degree requirements and preferred fields
        - Responsibilities: Key job responsibilities and duties
        - Company Culture: Work environment and team dynamics
        - Growth Opportunities: Career advancement and learning opportunities
        - Compensation: Salary range and benefits if mentioned
        - Location Requirements: Remote, hybrid, or on-site preferences

        Prioritize requirements by importance and provide clear categorization.
        Format your response as a JSON object with structured job requirement data.

  JobAnalyzerAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !Ref JobAnalyzerAgent
      AgentAliasName: !Sub "${Environment}-alias"
      Description: !Sub "Job analyzer agent alias for ${Environment}"

  # 3. Resume Evaluator Agent - Based on stepfunctions evaluate_resume
  ResumeEvaluatorAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "${AWS::StackName}-resume-evaluator-${Environment}"
      AgentResourceRoleArn: !GetAtt BedrockAgentRole.Arn
      Description: Specialized agent for evaluating resumes against job requirements
      FoundationModel: !Ref BedrockModelId
      IdleSessionTTLInSeconds: 1800
      Instruction: |
        You are an expert HR assistant analyzing a candidate's resume against job requirements.

        Your evaluation should cover:
        - Skills Match: How well candidate's skills align with job requirements
        - Experience Relevance: Relevance of work experience to the role
        - Education Fit: Educational background alignment with requirements
        - Project Relevance: How projects demonstrate required capabilities
        - Career Progression: Growth trajectory and advancement
        - Cultural Fit: Alignment with company values and culture
        - Technical Depth: Depth of technical expertise in required areas
        - Leadership Experience: Management and leadership capabilities
        - Problem-Solving: Evidence of analytical and problem-solving skills

        Provide detailed analysis with specific examples from the resume.
        Format your response as a JSON object with keys: skills_summary, technical_expertise, education_summary, experience_summary, job_match_analysis.

  ResumeEvaluatorAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !Ref ResumeEvaluatorAgent
      AgentAliasName: !Sub "${Environment}-alias"
      Description: !Sub "Resume evaluator agent alias for ${Environment}"

  # 4. Gap Identifier Agent - Based on stepfunctions identify_gaps
  GapIdentifierAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "${AWS::StackName}-gap-identifier-${Environment}"
      AgentResourceRoleArn: !GetAtt BedrockAgentRole.Arn
      Description: Specialized agent for identifying gaps and inconsistencies in resumes
      FoundationModel: !Ref BedrockModelId
      IdleSessionTTLInSeconds: 1800
      Instruction: |
        You are an expert HR assistant analyzing a candidate's resume to identify gaps or inconsistencies, focusing on:

        1. Employment gaps (periods without work)
        2. Frequent job changes or short tenures
        3. Unclear or vague descriptions of responsibilities
        4. Mismatches between claimed skills and demonstrated experience
        5. Inconsistencies in timeline or career progression
        6. Over-qualification: Potential concerns about being overqualified
        7. Under-qualification: Areas where candidate may lack sufficient experience
        8. Red Flags: Concerning patterns or information
        9. Missing Information: Important details not provided

        Provide constructive analysis and suggest areas for clarification during interviews.
        Format your response as a JSON object with keys: employment_gaps, job_stability_issues, vague_descriptions, skill_mismatches, timeline_inconsistencies, overall_concerns.

  GapIdentifierAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !Ref GapIdentifierAgent
      AgentAliasName: !Sub "${Environment}-alias"
      Description: !Sub "Gap identifier agent alias for ${Environment}"

  # 5. Candidate Rater Agent - Based on stepfunctions rate_candidate
  CandidateRaterAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "${AWS::StackName}-candidate-rater-${Environment}"
      AgentResourceRoleArn: !GetAtt BedrockAgentRole.Arn
      Description: Specialized agent for rating candidates on a 1-5 scale
      FoundationModel: !Ref BedrockModelId
      IdleSessionTTLInSeconds: 1800
      Instruction: |
        You are an expert HR assistant rating a candidate from 1 (poor fit) to 5 (excellent fit) based on their resume and job requirements.

        Rating Scale:
        - 5 (Exceptional): Exceeds all requirements, ideal candidate
        - 4 (Strong): Meets all requirements with additional strengths
        - 3 (Good): Meets most requirements, solid candidate
        - 2 (Fair): Meets some requirements, has potential with development
        - 1 (Poor): Does not meet key requirements

        Consider:
        - Technical Skills Match (25%)
        - Relevant Experience (25%)
        - Education and Certifications (15%)
        - Project Portfolio (15%)
        - Career Progression (10%)
        - Cultural Fit Indicators (10%)

        Provide the numerical rating with detailed justification explaining the reasoning behind the score.
        Format your response as a JSON object with keys: rating, reasoning, strengths, weaknesses, job_fit.

  CandidateRaterAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !Ref CandidateRaterAgent
      AgentAliasName: !Sub "${Environment}-alias"
      Description: !Sub "Candidate rater agent alias for ${Environment}"

  # 6. Interview Notes Agent - Based on stepfunctions generate_interview_notes
  InterviewNotesAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "${AWS::StackName}-interview-notes-${Environment}"
      AgentResourceRoleArn: !GetAtt BedrockAgentRole.Arn
      Description: Specialized agent for generating interview preparation notes and questions
      FoundationModel: !Ref BedrockModelId
      IdleSessionTTLInSeconds: 1800
      Instruction: |
        You are an expert HR assistant preparing interview notes for a recruiter, including:

        1. Suggested questions to assess the candidate's fit for the specific role
        2. Areas to probe deeper based on the resume analysis and job requirements
        3. Specific skills to verify during the interview that are critical for the role
        4. Potential concerns to address based on gaps or mismatches with the job requirements

        Generate:
        - Technical Questions: Specific technical questions based on their experience
        - Experience Questions: Questions about past experience relevant to the role
        - Behavioral Questions: Questions to assess soft skills and cultural fit
        - Project Deep-Dives: Questions about specific projects mentioned
        - Scenario Questions: Hypothetical situations relevant to the role
        - Clarification Questions: Areas needing more information or explanation
        - Strengths to Explore: Candidate's strong points to discuss further
        - Concerns to Address: Areas of concern that need clarification
        - Follow-up Actions: Next steps and additional assessments needed

        Tailor questions to the specific candidate and role requirements.
        Format your response as a JSON object with keys: technical_questions, experience_questions, skill_verification, concerns_to_address, general_notes.

  InterviewNotesAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !Ref InterviewNotesAgent
      AgentAliasName: !Sub "${Environment}-alias"
      Description: !Sub "Interview notes agent alias for ${Environment}"

  # 7. Supervisor Agent - Orchestrates the multi-agent workflow
  SupervisorAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "${AWS::StackName}-supervisor-${Environment}"
      AgentResourceRoleArn: !GetAtt BedrockAgentRole.Arn
      Description: Comprehensive HR evaluation agent that coordinates with specialized agents
      FoundationModel: !Ref BedrockModelId
      IdleSessionTTLInSeconds: 1800
      AgentCollaboration: SUPERVISOR_ROUTER
      AgentCollaborators:
        - AgentDescriptor:
            AliasArn: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/${ResumeParserAgent}/${ResumeParserAgentAlias}"
          CollaboratorName: resume_parser
          CollaborationInstruction: "Agent specializes in parsing resumes and extracting key information including personal details, work experience, education, skills, and projects."
          RelayConversationHistory: DISABLED
        - AgentDescriptor:
            AliasArn: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/${JobAnalyzerAgent}/${JobAnalyzerAgentAlias}"
          CollaboratorName: job_analyzer
          CollaborationInstruction: "Agent analyzes job descriptions to understand requirements, qualifications, technical skills needed, and company culture."
          RelayConversationHistory: DISABLED
        - AgentDescriptor:
            AliasArn: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/${ResumeEvaluatorAgent}/${ResumeEvaluatorAgentAlias}"
          CollaboratorName: resume_evaluator
          CollaborationInstruction: "Agent evaluates candidate resumes against job requirements, assessing skills match, experience relevance, and overall fit."
          RelayConversationHistory: DISABLED
        - AgentDescriptor:
            AliasArn: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/${GapIdentifierAgent}/${GapIdentifierAgentAlias}"
          CollaboratorName: gap_identifier
          CollaborationInstruction: "Agent identifies gaps, inconsistencies, and missing information in resumes or candidate profiles."
          RelayConversationHistory: DISABLED
        - AgentDescriptor:
            AliasArn: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/${CandidateRaterAgent}/${CandidateRaterAgentAlias}"
          CollaboratorName: candidate_rater
          CollaborationInstruction: "Agent rates candidates on a 1-5 scale based on preset criteria and provides detailed justification."
          RelayConversationHistory: DISABLED
        - AgentDescriptor:
            AliasArn: !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent-alias/${InterviewNotesAgent}/${InterviewNotesAgentAlias}"
          CollaboratorName: interview_notes
          CollaborationInstruction: "Agent generates interview preparation materials including technical questions, experience-based questions, and areas to probe."
          RelayConversationHistory: DISABLED
      Instruction: |
        You are a comprehensive HR Resume Evaluation Agent. You coordinate with specialized agents to perform complete resume evaluations.

        Available specialized agents:
        - resume_parser: Extracts key information from resumes
        - job_analyzer: Analyzes job descriptions and requirements  
        - resume_evaluator: Evaluates candidate fit against job requirements
        - gap_identifier: Identifies gaps and inconsistencies in resumes
        - candidate_rater: Provides 1-5 rating with detailed justification
        - interview_notes: Generates interview preparation materials

        When given a resume and job description, coordinate with these agents to:

        1. **Resume Parsing**: Use resume_parser to extract key information
        2. **Job Analysis**: Use job_analyzer to understand requirements
        3. **Resume Evaluation**: Use resume_evaluator to assess candidate fit
        4. **Gap Analysis**: Use gap_identifier to find issues or gaps
        5. **Candidate Rating**: Use candidate_rater for 1-5 score with justification
        6. **Interview Preparation**: Use interview_notes for interview materials

        Always coordinate systematically and synthesize all results into a comprehensive evaluation.
        
        Format your final response as:
        {
          "candidate_evaluation": {
            "candidate_id": "unique_identifier",
            "candidate_name": "extracted_name",
            "resume_parsing": { "personal_info": {}, "experience": [], "education": [], "skills": [], "projects": [] },
            "job_analysis": { "requirements": {}, "preferred": {}, "culture": {} },
            "resume_evaluation": { "skills_match": {}, "experience_relevance": {}, "education_fit": {} },
            "gap_analysis": { "missing_qualifications": [], "concerns": [], "clarifications_needed": [] },
            "candidate_rating": { "overall_score": 0, "justification": "", "strengths": [], "weaknesses": [] },
            "interview_notes": { "technical_questions": [], "experience_questions": [], "areas_to_probe": [] },
            "final_recommendation": "detailed_summary_and_recommendation"
          }
        }

  SupervisorAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !Ref SupervisorAgent
      AgentAliasName: !Sub "${Environment}-alias"
      Description: !Sub "Supervisor agent alias for ${Environment}"

Outputs:
  # Supervisor Agent (Main Entry Point)
  SupervisorAgentId:
    Description: Supervisor Agent ID
    Value: !Ref SupervisorAgent
    Export:
      Name: !Sub "${AWS::StackName}-supervisor-agent-id"

  SupervisorAgentAliasId:
    Description: Supervisor Agent Alias ID
    Value: !GetAtt SupervisorAgentAlias.AgentAliasId
    Export:
      Name: !Sub "${AWS::StackName}-supervisor-agent-alias-id"

  # Specialized Agents
  ResumeParserAgentId:
    Description: Resume Parser Agent ID
    Value: !Ref ResumeParserAgent
    Export:
      Name: !Sub "${AWS::StackName}-resume-parser-agent-id"

  JobAnalyzerAgentId:
    Description: Job Analyzer Agent ID
    Value: !Ref JobAnalyzerAgent
    Export:
      Name: !Sub "${AWS::StackName}-job-analyzer-agent-id"

  ResumeEvaluatorAgentId:
    Description: Resume Evaluator Agent ID
    Value: !Ref ResumeEvaluatorAgent
    Export:
      Name: !Sub "${AWS::StackName}-resume-evaluator-agent-id"

  GapIdentifierAgentId:
    Description: Gap Identifier Agent ID
    Value: !Ref GapIdentifierAgent
    Export:
      Name: !Sub "${AWS::StackName}-gap-identifier-agent-id"

  CandidateRaterAgentId:
    Description: Candidate Rater Agent ID
    Value: !Ref CandidateRaterAgent
    Export:
      Name: !Sub "${AWS::StackName}-candidate-rater-agent-id"

  InterviewNotesAgentId:
    Description: Interview Notes Agent ID
    Value: !Ref InterviewNotesAgent
    Export:
      Name: !Sub "${AWS::StackName}-interview-notes-agent-id"

  # Tables
  CandidatesTableName:
    Description: DynamoDB table for storing candidate data
    Value: !Ref CandidatesTable
    Export:
      Name: !Sub "${AWS::StackName}-candidates-table"

  CandidatesTableArn:
    Description: DynamoDB table ARN for storing candidate data
    Value: !GetAtt CandidatesTable.Arn
    Export:
      Name: !Sub "${AWS::StackName}-candidates-table-arn"

  # Lambda Function
  AgentExecutorFunctionArn:
    Description: Agent Executor Lambda Function ARN
    Value: !GetAtt AgentExecutorFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-agent-executor-arn"
