AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: HR AI Agent - Multi-Agent Collaboration with Amazon Bedrock Agents (Phase 1)

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name (dev, test, prod)
  
  BedrockModelId:
    Type: String
    Default: us.anthropic.claude-3-7-sonnet-20250219-v1:0
    Description: Amazon Bedrock model ID to use for the agents (Claude 3.7 Sonnet)

Resources:
  # DynamoDB Tables
  CandidatesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-candidates-${Environment}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  # IAM Role for Bedrock Agents
  BedrockAgentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-BedrockAgentRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt CandidatesTable.Arn
        - PolicyName: LambdaInvokeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt AgentExecutorFunction.Arn

  # Lambda function for agent actions
  AgentExecutorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-agent-executor-${Environment}"
      CodeUri: functions/agent_executor/
      Handler: app.lambda_handler
      Runtime: python3.11
      Timeout: 60
      Environment:
        Variables:
          CANDIDATES_TABLE: !Ref CandidatesTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CandidatesTable

  AgentExecutorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref AgentExecutorFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com

  # 1. Resume Parser Agent - Based on stepfunctions resume_parser
  ResumeParserAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "${AWS::StackName}-resume-parser-${Environment}"
      AgentResourceRoleArn: !GetAtt BedrockAgentRole.Arn
      Description: Specialized agent for parsing resumes and extracting key information
      FoundationModel: !Ref BedrockModelId
      IdleSessionTTLInSeconds: 1800
      Instruction: |
        Extract resume data. Return JSON only: {
          "personal_info": {"name": "", "email": "", "phone": "", "location": ""},
          "experience": [{"company": "", "role": "", "dates": "", "achievements": []}],
          "education": [{"degree": "", "institution": "", "year": ""}],
          "skills": {"technical": [], "languages": []},
          "projects": [{"name": "", "description": ""}],
          "certifications": []
        }
        Be fast and concise.

  ResumeParserAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !Ref ResumeParserAgent
      AgentAliasName: !Sub "${Environment}-alias"
      Description: !Sub "Resume parser agent alias for ${Environment}"

  # 2. Job Analyzer Agent
  JobAnalyzerAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "${AWS::StackName}-job-analyzer-${Environment}"
      AgentResourceRoleArn: !GetAtt BedrockAgentRole.Arn
      Description: Specialized agent for analyzing job descriptions and requirements
      FoundationModel: !Ref BedrockModelId
      IdleSessionTTLInSeconds: 1800
      Instruction: "Extract job requirements. Return JSON only: {\"required_skills\": [], \"preferred_skills\": [], \"experience_level\": \"\", \"education\": \"\", \"responsibilities\": [], \"culture\": \"\", \"location\": \"\"} Be fast and concise."

  JobAnalyzerAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !Ref JobAnalyzerAgent
      AgentAliasName: !Sub "${Environment}-alias"
      Description: !Sub "Job analyzer agent alias for ${Environment}"

  # 3. Resume Evaluator Agent
  ResumeEvaluatorAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "${AWS::StackName}-resume-evaluator-${Environment}"
      AgentResourceRoleArn: !GetAtt BedrockAgentRole.Arn
      Description: Specialized agent for evaluating resumes against job requirements
      FoundationModel: !Ref BedrockModelId
      IdleSessionTTLInSeconds: 1800
      Instruction: "Compare resume vs job. Return JSON only: {\"skills_match\": {\"score\": 0, \"details\": \"\"}, \"experience_relevance\": {\"score\": 0, \"details\": \"\"}, \"education_fit\": {\"score\": 0, \"details\": \"\"}, \"overall_fit\": {\"score\": 0, \"summary\": \"\"}} Be fast and concise."

  ResumeEvaluatorAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !Ref ResumeEvaluatorAgent
      AgentAliasName: !Sub "${Environment}-alias"
      Description: !Sub "Resume evaluator agent alias for ${Environment}"

  # 4. Gap Identifier Agent
  GapIdentifierAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "${AWS::StackName}-gap-identifier-${Environment}"
      AgentResourceRoleArn: !GetAtt BedrockAgentRole.Arn
      Description: Specialized agent for identifying gaps and inconsistencies in resumes
      FoundationModel: !Ref BedrockModelId
      IdleSessionTTLInSeconds: 1800
      Instruction: "Find gaps and issues. Return JSON only: {\"employment_gaps\": [], \"job_stability\": \"\", \"skill_mismatches\": [], \"timeline_issues\": [], \"concerns\": []} Be fast and concise."

  GapIdentifierAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !Ref GapIdentifierAgent
      AgentAliasName: !Sub "${Environment}-alias"
      Description: !Sub "Gap identifier agent alias for ${Environment}"

  # 5. Candidate Rater Agent
  CandidateRaterAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "${AWS::StackName}-candidate-rater-${Environment}"
      AgentResourceRoleArn: !GetAtt BedrockAgentRole.Arn
      Description: Specialized agent for rating candidates on a 1-5 scale
      FoundationModel: !Ref BedrockModelId
      IdleSessionTTLInSeconds: 1800
      Instruction: "Rate candidate 1-5. Return JSON only: {\"rating\": 0, \"reasoning\": \"\", \"strengths\": [], \"weaknesses\": [], \"recommendation\": \"\"} Be fast and concise."

  CandidateRaterAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !Ref CandidateRaterAgent
      AgentAliasName: !Sub "${Environment}-alias"
      Description: !Sub "Candidate rater agent alias for ${Environment}"

  # 6. Interview Notes Agent
  InterviewNotesAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "${AWS::StackName}-interview-notes-${Environment}"
      AgentResourceRoleArn: !GetAtt BedrockAgentRole.Arn
      Description: Specialized agent for generating interview preparation materials
      FoundationModel: !Ref BedrockModelId
      IdleSessionTTLInSeconds: 1800
      Instruction: "Generate interview notes. Return JSON only: {\"technical_questions\": [], \"experience_questions\": [], \"concerns_to_address\": [], \"key_areas_to_probe\": []} Be fast and concise."

  InterviewNotesAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !Ref InterviewNotesAgent
      AgentAliasName: !Sub "${Environment}-alias"
      Description: !Sub "Interview notes agent alias for ${Environment}"

  # 7. Supervisor Agent (without collaborators in Phase 1)
  SupervisorAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub "${AWS::StackName}-supervisor-${Environment}"
      AgentResourceRoleArn: !GetAtt BedrockAgentRole.Arn
      Description: Supervisor agent that coordinates with specialized collaborator agents for comprehensive resume evaluation
      FoundationModel: !Ref BedrockModelId
      IdleSessionTTLInSeconds: 1800
      # AgentCollaboration: SUPERVISOR_ROUTER  # Will be set manually after deployment
      Instruction: "You coordinate HR evaluations using specialized agents. STEPS: 1. Send resume to ResumeParserAgent 2. Send job description to JobAnalyzerAgent 3. Send resume + job analysis to ResumeEvaluatorAgent 4. Send evaluation to CandidateRaterAgent 5. Send results to GapIdentifierAgent 6. Send all to InterviewNotesAgent Return final JSON: {\"candidate_evaluation\": {\"candidate_id\": \"extracted_id\", \"candidate_name\": \"extracted_name\", \"resume_parsing\": \"[ResumeParserAgent response]\", \"job_analysis\": \"[JobAnalyzerAgent response]\", \"resume_evaluation\": \"[ResumeEvaluatorAgent response]\", \"gap_analysis\": \"[GapIdentifierAgent response]\", \"candidate_rating\": \"[CandidateRaterAgent response]\", \"interview_notes\": \"[InterviewNotesAgent response]\", \"timestamp\": \"ISO_timestamp\"}} Coordinate efficiently and return structured results."

  SupervisorAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !Ref SupervisorAgent
      AgentAliasName: !Sub "${Environment}-alias"
      Description: !Sub "Supervisor agent alias for ${Environment}"

Outputs:
  # Supervisor Agent (Main Entry Point)
  SupervisorAgentId:
    Description: Supervisor Agent ID
    Value: !Ref SupervisorAgent
    Export:
      Name: !Sub "${AWS::StackName}-supervisor-agent-id"

  SupervisorAgentAliasId:
    Description: Supervisor Agent Alias ID
    Value: !GetAtt SupervisorAgentAlias.AgentAliasId
    Export:
      Name: !Sub "${AWS::StackName}-supervisor-agent-alias-id"

  # Specialized Agents
  ResumeParserAgentId:
    Description: Resume Parser Agent ID
    Value: !Ref ResumeParserAgent
    Export:
      Name: !Sub "${AWS::StackName}-resume-parser-agent-id"

  JobAnalyzerAgentId:
    Description: Job Analyzer Agent ID
    Value: !Ref JobAnalyzerAgent
    Export:
      Name: !Sub "${AWS::StackName}-job-analyzer-agent-id"

  ResumeEvaluatorAgentId:
    Description: Resume Evaluator Agent ID
    Value: !Ref ResumeEvaluatorAgent
    Export:
      Name: !Sub "${AWS::StackName}-resume-evaluator-agent-id"

  GapIdentifierAgentId:
    Description: Gap Identifier Agent ID
    Value: !Ref GapIdentifierAgent
    Export:
      Name: !Sub "${AWS::StackName}-gap-identifier-agent-id"

  CandidateRaterAgentId:
    Description: Candidate Rater Agent ID
    Value: !Ref CandidateRaterAgent
    Export:
      Name: !Sub "${AWS::StackName}-candidate-rater-agent-id"

  InterviewNotesAgentId:
    Description: Interview Notes Agent ID
    Value: !Ref InterviewNotesAgent
    Export:
      Name: !Sub "${AWS::StackName}-interview-notes-agent-id"

  # Tables
  CandidatesTableName:
    Description: DynamoDB table for storing candidate data
    Value: !Ref CandidatesTable
    Export:
      Name: !Sub "${AWS::StackName}-candidates-table"

  CandidatesTableArn:
    Description: DynamoDB table ARN for storing candidate data
    Value: !GetAtt CandidatesTable.Arn
    Export:
      Name: !Sub "${AWS::StackName}-candidates-table-arn"

  # Lambda Function
  AgentExecutorFunctionArn:
    Description: Agent Executor Lambda Function ARN
    Value: !GetAtt AgentExecutorFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-agent-executor-arn"
      
  # IAM Role
  BedrockAgentRoleArn:
    Description: IAM Role ARN for Bedrock Agents
    Value: !GetAtt BedrockAgentRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-agent-role-arn"
