AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: HR AI Agent - Lambda Functions for Multi-Agent System

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name (dev, test, prod)
  
  AgentsStackName:
    Type: String
    Default: bedrock-agent-multiagent
    Description: Name of the agents stack to import values from

Resources:
  # S3 Bucket for storing resumes and job descriptions
  DocumentsBucket:
    Type: AWS::S3::Bucket
    DependsOn: ResumeProcessorPermission
    Properties:
      BucketName: !Sub "${AgentsStackName}-documents-${Environment}"
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: resumes/
            Function: !GetAtt ResumeProcessorFunction.Arn

  # Lambda function to process resume uploads
  ResumeProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-resume-processor-${Environment}"
      CodeUri: functions/resume_processor/
      Handler: app.lambda_handler
      Runtime: python3.11
      Timeout: 300
      Environment:
        Variables:
          SUPERVISOR_AGENT_ID:
            Fn::ImportValue: !Sub "${AgentsStackName}-supervisor-agent-id"
          SUPERVISOR_AGENT_ALIAS_ID:
            Fn::ImportValue: !Sub "${AgentsStackName}-supervisor-agent-alias-id"
          DOCUMENTS_BUCKET: !Sub "${AgentsStackName}-documents-${Environment}"
          CANDIDATES_TABLE:
            Fn::ImportValue: !Sub "${AgentsStackName}-candidates-table"
      Policies:
        - S3ReadPolicy:
            BucketName: !Sub "${AgentsStackName}-documents-${Environment}"
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeAgent
              Resource: "*"
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource:
                Fn::ImportValue: !Sub "${AgentsStackName}-candidates-table-arn"

  ResumeProcessorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ResumeProcessorFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub "arn:aws:s3:::${AgentsStackName}-documents-${Environment}"

Outputs:
  DocumentsBucketName:
    Description: S3 bucket for storing resumes and job descriptions
    Value: !Ref DocumentsBucket
    Export:
      Name: !Sub "${AWS::StackName}-documents-bucket"

  ResumeProcessorFunctionName:
    Description: Resume Processor Lambda Function Name
    Value: !Ref ResumeProcessorFunction

  ResumeProcessorFunctionArn:
    Description: Resume Processor Lambda Function ARN
    Value: !GetAtt ResumeProcessorFunction.Arn
